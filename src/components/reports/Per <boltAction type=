import React, { useState, useRef } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { ArrowUpRight, ArrowDownRight, ChevronDown, Check } from 'lucide-react';
import { useClickOutside } from '@/lib/useClickOutside';

interface Metric {
  name: string;
  value: number;
  change: number;
  data: Array<{
    date: string;
    value: number;
  }>;
}

interface PerformanceOverviewProps {
  metrics: {
    roas: Metric;
    cpa: Metric;
    ctr: Metric;
  };
}

export const PerformanceOverview: React.FC<PerformanceOverviewProps> = ({ metrics }) => {
  // Combine related state into a single object
  const [uiState, setUiState] = useState({
    timeframe: '7d' as '7d' | '30d' | '90d',
    platform: 'all' as 'all' | 'facebook' | 'tiktok',
    openDropdown: null as null | 'timeframe' | 'platform'
  });
  
  const timeframeRef = useRef<HTMLDivElement>(null);
  const platformRef = useRef<HTMLDivElement>(null);
  
  useClickOutside(timeframeRef, () => {
    if (uiState.openDropdown === 'timeframe') {
      setUiState(prev => ({ ...prev, openDropdown: null }));
    }
  });
  
  useClickOutside(platformRef, () => {
    if (uiState.openDropdown === 'platform') {
      setUiState(prev => ({ ...prev, openDropdown: null }));
    }
  });

  const toggleDropdown = (dropdown: 'timeframe' | 'platform') => {
    setUiState(prev => ({
      ...prev,
      openDropdown: prev.openDropdown === dropdown ? null : dropdown
    }));
  };

  const setTimeframe = (timeframe: '7d' | '30d' | '90d') => {
    setUiState(prev => ({
      ...prev,
      timeframe,
      openDropdown: null
    }));
  };

  const setPlatform = (platform: 'all' | 'facebook' | 'tiktok') => {
    setUiState(prev => ({
      ...prev,
      platform,
      openDropdown: null
    }));
  };

  const renderMetricCard = (metric: Metric) => (
    <div className="bg-white p-6 rounded-xl border border-gray-200">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-sm font-medium text-gray-500">{metric.name}</h3>
        <div className={`flex items-center text-sm ${
          metric.change > 0 ? 'text-green-500' : 'text-red-500'
        }`}>
          {metric.change > 0 ? (
            <ArrowUpRight className="w-4 h-4 mr-1" />
          ) : (
            <ArrowDownRight className="w-4 h-4 mr-1" />
          )}
          {Math.abs(metric.change)}%
        </div>
      </div>
      <div className="text-2xl font-semibold text-gray-900 mb-4">
        {metric.value.toFixed(2)}
      </div>
      <div className="h-32">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={metric.data} margin={{ left: 0, right: 5 }}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} />
            <XAxis 
              dataKey="date" 
              axisLine={false}
              tickLine={false}
              tick={{ fontSize: 12, fill: '#6B7280' }}
              padding={{ left: 0, right: 0 }}
            />
            <YAxis 
              axisLine={false}
              tickLine={false}
              tick={{ fontSize: 12, fill: '#6B7280' }}
              width={40}
              domain={['dataMin - 10%', 'dataMax + 10%']}
            />
            <Tooltip 
              contentStyle={{ 
                borderRadius: '0.5rem', 
                border: '1px solid #E5E7EB',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
              }}
              formatter={(value: number) => [value.toFixed(2), metric.name]}
              labelFormatter={(label) => `Date: ${label}`}
            />
            <Line
              type="monotone"
              dataKey="value"
              stroke="#F43F5E"
              strokeWidth={2}
              dot={false}
              activeDot={{ r: 4, strokeWidth: 1 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-lg font-medium text-gray-900">Performance Overview</h2>
        <div className="flex items-center space-x-4">
          <div className="relative" ref={timeframeRef}>
            <button
              onClick={() => toggleDropdown('timeframe')}
              className="flex items-center justify-between px-4 py-2 text-sm text-gray-700 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors w-[180px]"
            >
              {uiState.timeframe === '7d' ? 'Last 7 days' : 
               uiState.timeframe === '30d' ? 'Last 30 days' : 'Last 90 days'}
              <ChevronDown className="w-4 h-4 ml-2 text-gray-400" />
            </button>
            
            {uiState.openDropdown === 'timeframe' && (
              <div className="absolute right-0 mt-2 w-[180px] bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50">
                {(['7d', '30d', '90d'] as const).map((option) => (
                  <button
                    key={option}
                    onClick={() => setTimeframe(option)}
                    className="flex items-center w-full px-4 py-2 text-sm text-left text-gray-700 hover:bg-gray-50"
                  >
                    {uiState.timeframe === option && <Check className="w-4 h-4 mr-2 text-primary-500" />}
                    <span className={uiState.timeframe === option ? 'ml-6' : ''}>
                      {option === '7d' ? 'Last 7 days' : 
                       option === '30d' ? 'Last 30 days' : 'Last 90 days'}
                    </span>
                  </button>
                ))}
              </div>
            )}
          </div>
          
          <div className="relative" ref={platformRef}>
            <button
              onClick={() => toggleDropdown('platform')}
              className="flex items-center justify-between px-4 py-2 text-sm text-gray-700 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors w-[180px]"
            >
              {uiState.platform === 'all' ? 'All Platforms' : 
               uiState.platform === 'facebook' ? 'Facebook' : 'TikTok'}
              <ChevronDown className="w-4 h-4 ml-2 text-gray-400" />
            </button>
            
            {uiState.openDropdown === 'platform' && (
              <div className="absolute right-0 mt-2 w-[180px] bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50">
                {(['all', 'facebook', 'tiktok'] as const).map((option) => (
                  <button
                    key={option}
                    onClick={() => setPlatform(option)}
                    className="flex items-center w-full px-4 py-2 text-sm text-left text-gray-700 hover:bg-gray-50"
                  >
                    {uiState.platform === option && <Check className="w-4 h-4 mr-2 text-primary-500" />}
                    <span className={uiState.platform === option ? 'ml-6' : ''}>
                      {option === 'all' ? 'All Platforms' : 
                       option === 'facebook' ? 'Facebook' : 'TikTok'}
                    </span>
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-3 gap-6">
        {renderMetricCard(metrics.roas)}
        {renderMetricCard(metrics.cpa)}
        {renderMetricCard(metrics.ctr)}
      </div>
    </div>
  );
};